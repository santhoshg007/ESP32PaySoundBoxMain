UserName : konguess
Password : konguess#$007
--------------------------
TFT Display :
---------------
	https://www.waveshare.com/wiki/ESP32-S3-Touch-LCD-2.8
	https://www.youtube.com/watch?v=tTS9hT7G6yQ

 Choose SPI pins that don’t conflict with USB or internal use
On the ESP32-S3, recommended safe SPI pins are:


Pin Configuration :
	RX1, 3, 18, 16, 7, 5, EN, GND
	TX1, 46, 8, 17, 15, 6, 4 , 3.3V

	14, 21, 45, 0, 39, 40, 41, 42
	38, RX, TX, DTR, RTS, GND, GND , 3.3V
	
Display :
	#define TFT_MOSI 15
	#define TFT_SCLK 14
	#define TFT_CS   5
	#define TFT_DC   16
	#define TFT_RST  17	
Keypad :
	uint8_t gacKeypadRowPins[MAX_KEYPAD_ROWS] = {14, 21, 45, 38};
	uint8_t gacKeypadColPins[MAX_KEYPAD_COLMS] = {7, 5, 15, 6};
	
4G Connection :
	EC200U TX → ESP32 GPIO16 (RX)
	EC200U RX → ESP32 GPIO17 (TX)
Audio Amplifier :
	
Working pin :
	#define TFT_MOSI 3   // Connect to the pin labeled "3" (1st from left, top row) - This is GPIO3
	#define TFT_SCLK 14 // First pin on the bottom row (labeled "14 (RX1)")
	#define TFT_CS   5  // Fifth pin from the left on the top row (labeled "5")
	#define TFT_DC   18 // Second pin from the left on the top row (labeled "18")
	#define TFT_RST  40 // Fifth pin from the left on the bottom row (labeled "40")
	
+++++++++++
Need to check this pin;

	#define TFT_MOSI 3   // Connect to the pin labeled "3" (1st from left, top row) - This is GPIO3
	#define TFT_SCLK 14 // First pin on the bottom row (labeled "14 (RX1)")
	#define TFT_CS   5  // Fifth pin from the left on the top row (labeled "5")
	#define TFT_DC   18 // Second pin from the left on the top row (labeled "18")
	#define TFT_RST  40 // Fifth pin from the left on the bottom row (labeled "40")

uint8_t gacKeypadRowPins[MAX_KEYPAD_ROWS] = {21, 45, 38, 39}; // Changed 14 to 39
uint8_t gacKeypadColPins[MAX_KEYPAD_COLMS] = {7, 6, 4, 3};    // Changed 5, 15, 6 to 4, 3

#define EC200U_TX 16  // ESP32 RX
#define EC200U_RX 17  // ESP32 TX

++++++++++++++++++


Role	Suggested GPIOs
MOSI	GPIO 11, 13, 15
MISO	GPIO 12, 14
SCLK	GPIO 9, 10
CS	Any free pin (e.g. GPIO 5, 7, etc.)
DC / RST	Any free pin (e.g. GPIO 6, 16, 17)
You cannot use GPIO 19 or 20 unless USB is fully disabled in the build settings.


Search for qrcode (by Richard Moore)

1. Set up the environment:
-------------------------
	1. Install the ESP32 board support in Arduino IDE (Go to File -> Preferences -> add https://dl.espressif.com/dl/package_esp32_index.json to the Additional Boards Manager URLs).

	2. Install the board by navigating to Tools -> Board -> Boards Manager, search for ESP32, and install the ESP32 package
	
To program the ESP32-S3 on Ubuntu 22.04, you can follow these steps to set up the development environment:

### 1. **Install Required Packages**
   Open a terminal and install the necessary dependencies:
   ```bash
   sudo apt update
   sudo apt install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0
   ```

### 2. **Download ESP-IDF (Espressif IoT Development Framework)**
   - Clone the ESP-IDF repository:
     ```bash
     mkdir -p ~/esp
     cd ~/esp
     git clone --recursive https://github.com/espressif/esp-idf.git
     ```
   - Navigate to the ESP-IDF directory:
     ```bash
     cd ~/esp/esp-idf
     ```

### 3. **Install ESP-IDF Tools**
   - Run the installation script:
     ```bash
     ./install.sh esp32s3
     ```
   - Export the environment variables:
     ```bash
     . ./export.sh
     ```

### 4. **Set Up Permissions**
   - Add your user to the `dialout` group to access the serial port:
     ```bash
     sudo usermod -a -G dialout $USER
     ```
   - Log out and log back in for the changes to take effect.

### 5. **Test the Setup**
   - Connect your ESP32-S3 board to your computer via USB.
   - Check if the device is recognized:
     ```bash
     dmesg | grep ttyUSB
     ```
   - If the device is not recognized, ensure the `cp210x` driver is loaded:
     ```bash
     sudo modprobe cp210x
     ```

### 6. **Build and Flash a Sample Program**
   - Navigate to an example project:
     ```bash
     cd ~/esp/esp-idf/examples/get-started/hello_world
     ```
   - Build the project:
     ```bash
     idf.py build
     ```
   - Flash the program to the ESP32-S3:
     ```bash
     idf.py -p /dev/ttyUSB0 flash
     ```
   - Monitor the output:
     ```bash
     idf.py monitor
     ```

This should get your ESP32-S3 up and running on Ubuntu 22.04. Let me know if you encounter any issues!


To program the ESP32-S3 on Ubuntu 22.04, you can follow these steps to set up the development environment:

### 1. **Install Required Packages**
   Open a terminal and install the necessary dependencies:
   ```bash
   sudo apt update
   sudo apt install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0
   ```

### 2. **Download ESP-IDF (Espressif IoT Development Framework)**
   - Clone the ESP-IDF repository:
     ```bash
     mkdir -p ~/esp
     cd ~/esp
     git clone --recursive https://github.com/espressif/esp-idf.git
     ```
   - Navigate to the ESP-IDF directory:
     ```bash
     cd ~/esp/esp-idf
     ```

### 3. **Install ESP-IDF Tools**
   - Run the installation script:
     ```bash
     ./install.sh esp32s3
     ```
   - Export the environment variables:
     ```bash
     . ./export.sh
     ```

### 4. **Set Up Permissions**
   - Add your user to the `dialout` group to access the serial port:
     ```bash
     sudo usermod -a -G dialout $USER
     ```
   - Log out and log back in for the changes to take effect.

### 5. **Test the Setup**
   - Connect your ESP32-S3 board to your computer via USB.
   - Check if the device is recognized:
     ```bash
     dmesg | grep ttyUSB
     ```
   - If the device is not recognized, ensure the `cp210x` driver is loaded:
     ```bash
     sudo modprobe cp210x
     ```

### 6. **Build and Flash a Sample Program**
   - Navigate to an example project:
     ```bash
     cd ~/esp/esp-idf/examples/get-started/hello_world
     ```
   - Build the project:
     ```bash
     idf.py build
     ```
   - Flash the program to the ESP32-S3:
     ```bash
     idf.py -p /dev/ttyUSB0 flash
     ```
   - Monitor the output:
     ```bash
     idf.py monitor
     ```

This should get your ESP32-S3 up and running on Ubuntu 22.04. Let me know if you encounter any issues!


If the ESP32-S3 WROOM2 device is still not detected, here are some additional steps to troubleshoot:

### 1. **Check USB Connection**
   - Ensure the USB cable is data-capable (not power-only).
   - Try connecting to a different USB port or use another cable.

### 2. **Verify Device Recognition**
   - Run the following command to check if the device is recognized:
     ```bash
     lsusb
     ```
   - Look for an entry like `Silicon Labs CP210x USB to UART Bridge`. If it's not listed, the device might not be powered or the driver isn't loaded.

### 3. **Disable `brltty`**
   - `brltty` (Braille TTY) can sometimes interfere with USB-to-serial devices. Disable it using:
     ```bash
     sudo systemctl stop brltty.service
     sudo systemctl disable brltty.service
     ```

### 4. **Reload USB Drivers**
   - Reload the `cp210x` driver:
     ```bash
     sudo modprobe -r cp210x
     sudo modprobe cp210x
     ```

### 5. **Update Udev Rules**
   - Add custom udev rules to ensure proper permissions for the device:
     ```bash
     sudo nano /etc/udev/rules.d/99-esp32.rules
     ```
     Add the following line:
     ```
     SUBSYSTEM=="usb", ATTR{idVendor}=="10c4", ATTR{idProduct}=="ea60", MODE="0666"
     ```
     Save and reload udev rules:
     ```bash
     sudo udevadm control --reload-rules
     sudo udevadm trigger
     ```

### 6. **Force Boot Mode**
   - Press and hold the "BOOT" button on the ESP32-S3 WROOM2 while connecting it to your computer. This forces the device into firmware download mode.

### 7. **Test on Another System**
   - If possible, test the ESP32-S3 WROOM2 on another computer to rule out hardware issues.


The `idf.py` tool does not directly support the `--chip` option, as that is instead managed through the project setup process with `idf.py set-target`. Here's how to fix the issue:

### 1. **Set the Target to ESP32-S3**
   Before flashing, ensure the target is correctly set to the ESP32-S3. Run the following:
   ```bash
   idf.py set-target esp32s3
   ```

   This will configure the build system for the ESP32-S3 chip.

---

### 2. **Rebuild the Project**
   After setting the target, rebuild the project to ensure compatibility:
   ```bash
   idf.py build
   ```

---

### 3. **Flash Without the `--chip` Option**
   Now flash the firmware without including the `--chip` argument:
   ```bash
   idf.py -p /dev/ttyACM0 -b 460800 flash
   ```

   The target configuration is already handled by the `set-target` step, so there's no need to specify the chip again here.

---

### 4. **Monitor Serial Output**
   Once flashing is complete, monitor the device output:
   ```bash
   idf.py -p /dev/ttyACM0 monitor
   ```

---
To enable `CONFIG_LOG_DEFAULT_LEVEL_DEBUG` in your ESP-IDF project, you need to update the configuration settings using `menuconfig`. Here are the steps to enable it:

---

### **1. Open the ESP-IDF Configuration Menu**
   - Navigate to your project directory, where the `sdkconfig` file is located.
   - Run the following command:
     ```bash
     idf.py menuconfig
     ```

---

### **2. Navigate to Log Settings**
   - In the menuconfig interface, navigate to:
     ```
     Component config → Log output
     ```
   - Select **Default log verbosity** and set it to `DEBUG`.

---

### **3. Save the Configuration**
   - Press the `S` key or navigate to `Save` to save the configuration.
   - Exit the menuconfig interface by pressing the `Q` key.

---

### **4. Rebuild the Project**
   - Recompile your project to apply the new configuration settings:
     ```bash
     idf.py build
     ```

---

### **5. Verify Logs in Serial Monitor**
   - Flash the code and start the monitor to confirm `DEBUG` level logs are printed:
     ```bash
     idf.py -p /dev/ttyACM0 flash monitor
     ```

Now you'll be able to see detailed debug-level logs. Let me know if you need help with this process or anything else! 🚀
------------------------
Press Ctrl + ] to exit the monitor when you're done.

Install the libary :
	sudo apt install git wget flex bison gperf python3 python3-pip python3-venv c^Cke ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0	

. ./export.sh

1. Set the Target:
	idf.py set-target esp32s3

2. Compile the blink project:
	idf.py fullclean
	idf.py build
	
3. Flash the Blink Code:
	idf.py -p /dev/ttyACM0 flash
4. Monitor the Output:
	idf.py -p /dev/ttyACM0 monitor
Y	

dd ESP32 Board Support:

Open the Arduino IDE.
Go to File > Preferences.
In the "Additional Boards Manager URLs" field, add the following URL:
	https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
	
	
Search for the Keypad library: In the Library Manager, type Keypad in the search bar.
Install the Keypad library: Find the library by Mark Stanley and Alexander Brevig, and click Insta


GPIO39–42:
These are typically input-only on some ESP32-S3 modules, or may be reserved for internal functions (like USB, PSRAM, or flash).

If you're using a module like ESP32-S3-WROOM-1, some of these pins (especially GPIO40–42) can be tricky.	


Keypad :
	uint8_t rowPins[ROWS] = {14, 21, 45, 1}; // Replaced GPIO0 with GPIO1
	uint8_t colPins[COLS] = {13, 12, 11, 10}; // Replaced high GPIOs with safer ones
	
	
Working code :
==============
#include <Keypad.h>
#include <Wire.h>

#define ROWS  4
#define COLS  4

char keyMap[ROWS][COLS] = {
  {'1','2','3', 'A'},
  {'4','5','6', 'B'},
  {'7','8','9', 'C'},
  {'*','0','#', 'D'}
};

#if 0
uint8_t rowPins[ROWS] = {14, 27, 26, 25}; // GPIO14, GPIO27, GPIO26, GPIO25
uint8_t colPins[COLS] = {33, 32, 18, 19}; // GPIO33, GPIO32, GPIO18, GPIO19
#else
uint8_t rowPins[ROWS] = {14, 21, 45, 38}; // GPIO14, GPIO27, GPIO26, GPIO25
uint8_t colPins[COLS] = {7, 5, 15, 6}; // GPIO33, GPIO32, GPIO18, GPIO19
#endif

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

void setup(){
  Serial.begin(115200);  // Start the Serial communication
  while (!Serial);       // Wait for serial monitor
}

void loop(){
  char key = keypad.getKey();
  if (key) {
    Serial.print("Key Pressed: ");
    Serial.print(key);
    Serial.println("");
  }
}




Task Type	Stack Size	Delay/Yield?	Priority	Pin or Not?
Keypad polling	2048	Yes (vTaskDelay)	1	Pin (optional)
Sensor reading	2048	Yes	1	Pin (optional)
Display update	2048–4096	Yes	1–2	Optional
4G comm (AT cmds)	4096–6144	Depends	2–3	Often pinned (stable timing)
WiFi/Bluetooth	Handled internally	Yes	0–2 (sys)	Always on Core 0
====================================
#include <Keypad.h>
#include <Wire.h>

#define MAX_KEYPAD_ROWS  4
#define MAX_KEYPAD_COLMS  4

#define KEYPAD_TASK_NAME "KEYTSK"
#define KEYPAD_TASK_STACK_SIZE  ( 2 * 1024 ) /* 2kb */

char gcaKeyMapMtx[MAX_KEYPAD_ROWS][MAX_KEYPAD_COLMS] = {
  {'1','2','3', 'A'},
  {'4','5','6', 'B'},
  {'7','8','9', 'C'},
  {'*','0','#', 'D'}
};


uint8_t gacKeypadRowPins[MAX_KEYPAD_ROWS] = {14, 21, 45, 38}; // Updated working row pins
uint8_t gacKeypadColPins[MAX_KEYPAD_COLMS] = {7, 5, 15, 6};    // Updated working column pins


Keypad keypad = Keypad(makeKeymap(gcaKeyMapMtx), gacKeypadRowPins, gacKeypadColPins, MAX_KEYPAD_ROWS, MAX_KEYPAD_COLMS);

// FreeRTOS task handle (optional, for tracking)
TaskHandle_t gtskkeypadHandle = NULL;

// Task function for keypad
void KeypadReadProcess(void *pvParameters) 
{
  while (1) 
  {
    char key = keypad.getKey();
    if (key) {
      Serial.print("Key Pressed: ");
      Serial.println(key);
    }
    vTaskDelay(10 / portTICK_PERIOD_MS); // Small delay to avoid hogging CPU
  }
}

void setup() {
  Serial.begin(115200);
  while (!Serial);

#if 1
  // Create keypad task on core 1 with priority 1
  xTaskCreatePinnedToCore(
            KeypadReadProcess,         // Function to run
            KEYPAD_TASK_NAME,      // Task name
            KEYPAD_TASK_STACK_SIZE,               // Stack size
            NULL,               // Task input param
            1,                  // Priority
            &gtskkeypadHandle,  // Task handle (optional)
            1                   // Run on Core 1 (or 0)
          );
#else
 //  Create task WITHOUT pinning to a core
  BaseType_t result = xTaskCreate(
        KeypadReadProcess,          // Function to run
        KEYPAD_TASK_NAME,       // Name (for debugging)
        KEYPAD_TASK_STACK_SIZE,                // Stack size (in words, not bytes)
        NULL,                // Task parameters (not needed here)
        1,                   // Task priority
        &gtskkeypadHandle    // Task handle (optional)
      );

      // Optional: Check if task was created successfully
      if (result != pdPASS) {
        Serial.println("Failed to create keypad task!");
      }
#endif          
}

void loop() {
  // You can do other stuff here or leave empty
}
	
++++++++++++++++++
#include <TFT_eSPI.h>
#include <SPI.h>
#include <Keypad.h>
#include <Wire.h>
#include <qrcode.h> // Include the qrcode.h

TFT_eSPI tft = TFT_eSPI();

// Color order setting
#define TFT_RGB_ORDER TFT_RGB

// Colors
#define BG_COLOR TFT_BLUE
#define TEXT_COLOR TFT_WHITE
#define HIGHLIGHT_COLOR 0xADD8E6

// Keypad Navigation Mapping
#define KEY_UP 'B'
#define KEY_DOWN 'C'
#define KEY_SELECT 'D'

// Positions and sizes
int logoX = tft.width() / 2;
int logoY = 30;
int logoFontSize = 2;
String logoText = "Sound Box";
int itemStartY = 80;
int itemSpacing = 30;
int iconSize = 24;
int textOffsetX = 30;
int itemFontSize = 2;

// Menu Items with Icons
String menuItems[] = {"QR Code Pay", "NFC Pay", "History", "Settings"};
String menuIcons[] = {"QR", "NFC", "Hist", "Set"};
int selectedItem = 0;
int previousItem = 0;

// Keypad
#define MAX_KEYPAD_ROWS 4
#define MAX_KEYPAD_COLMS 4
char gcaKeyMapMtx[MAX_KEYPAD_ROWS][MAX_KEYPAD_COLMS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}};
uint8_t gacKeypadRowPins[MAX_KEYPAD_ROWS] = {14, 21, 45, 38};
uint8_t gacKeypadColPins[MAX_KEYPAD_COLMS] = {7, 5, 15, 6};
Keypad keypad = Keypad(makeKeymap(gcaKeyMapMtx), gacKeypadRowPins, gacKeypadColPins, MAX_KEYPAD_ROWS, MAX_KEYPAD_COLMS);

// Function to get payment amount
String getPaymentAmount()
{
    tft.fillScreen(BG_COLOR);
    tft.setTextColor(TEXT_COLOR);
    tft.setTextSize(2);
    tft.setTextDatum(MC_DATUM);
    tft.drawString("Enter Amount:", tft.width() / 2, tft.height() / 2 - 30, 2);

    String amount = "";
    bool decimalPointEntered = false;
    int xPos = tft.width() / 2;
    int yPos = tft.height() / 2;

    while (true)
    {
        char key = keypad.getKey();
        if (key)
        {
            if (key >= '0' && key <= '9')
            {
                amount += key;
                tft.fillRoundRect(xPos - 50, yPos - 15, 100, 30, 5, BG_COLOR);
                tft.drawString(amount, xPos, yPos, 2);
            }
            else if (key == 'A')
            {
                if (!decimalPointEntered)
                {
                    amount += '.';
                    decimalPointEntered = true;
                    tft.fillRoundRect(xPos - 50, yPos - 15, 100, 30, 5, BG_COLOR);
                    tft.drawString(amount, xPos, yPos, 2);
                }
            }
            else if (key == 'D')
            {
                if (amount.length() > 0)
                {
                    return amount;
                }
            }
            else if (key == '*')
            {
                amount = "";
                decimalPointEntered = false;
                tft.fillScreen(BG_COLOR);
                tft.setTextColor(TEXT_COLOR);
                tft.setTextSize(2);
                tft.setTextDatum(MC_DATUM);
                tft.drawString("Enter Amount:", tft.width() / 2, tft.height() / 2 - 30, 2);
            }
            delay(100);
        }
    }
}

// Function to generate QR code
void generateUpiQRCode(String upiId, String amount)
{
    tft.fillScreen(BG_COLOR);
    tft.setTextColor(TEXT_COLOR);
    tft.setTextSize(2);
    tft.setTextDatum(MC_DATUM);
    tft.drawString("Generating QR Code...", tft.width() / 2, tft.height() / 2 - 30, 2);
    Serial.println("Generating QR Code for UPI ID: " + upiId + ", Amount: " + amount);

    // Construct the UPI QR code data string
    String qrData = "upi://pay?pa=" + upiId + "&am=" + amount + "&cu=INR";

    // Create the QR code
    QRCode qrcode;
    uint8_t qrcodeData[qrcode_getBufferSize(qrData.length())];
    qrcode_initBytes(&qrcode, qrcodeData, qrData.length(), ECC_LOW);

    qrcode_generate(&qrcode, qrData.c_str());

    // Calculate QR code dimensions and position
    int qrCodeSize = qrcode.size;
    int xPos = (tft.width() - qrCodeSize * 3) / 2;
    int yPos = (tft.height() - qrCodeSize * 3) / 2;
    int moduleSize = 3;

    // Draw the QR code
    for (int y = 0; y < qrCodeSize; y++)
    {
        for (int x = 0; x < qrCodeSize; x++)
        {
            if (qrcode_getModule(&qrcode, x, y))
            {
                tft.fillRect(xPos + x * moduleSize, yPos + y * moduleSize, moduleSize, moduleSize, TFT_BLACK);
            }
            else
            {
                tft.fillRect(xPos + x * moduleSize, yPos + y * moduleSize, moduleSize, moduleSize, TFT_WHITE);
            }
        }
    }
    tft.setTextColor(TFT_BLACK);
    tft.setTextSize(2);
    tft.setTextDatum(MC_DATUM);
    tft.drawString("Scan to Pay", tft.width() / 2, yPos + (qrCodeSize * moduleSize) + 30, 2);

    delay(5000);
}

void drawHomeScreen()
{
    tft.fillScreen(BG_COLOR);
    tft.setTextColor(TEXT_COLOR);

    // Draw Logo
    tft.setTextSize(logoFontSize);
    tft.setTextDatum(MC_DATUM);
    tft.drawString(logoText, logoX, logoY, 2);

    // Draw Menu Items
    tft.setTextSize(itemFontSize);
    tft.setTextDatum(ML_DATUM);
    for (int i = 0; i < 4; i++)
    {
        int yPos = itemStartY + i * itemSpacing;
        tft.setTextColor(TEXT_COLOR);
        tft.setTextSize(1);
        tft.drawString(menuIcons[i], 25, yPos, 2);
        tft.setTextSize(itemFontSize);
        tft.drawString(menuItems[i], 25 + iconSize + textOffsetX - 5, yPos, 2);
    }
    //draw initial highlight
    int yPos = itemStartY + selectedItem * itemSpacing;
    tft.fillRect(10, yPos - 12, tft.width() - 20, 24, HIGHLIGHT_COLOR);
    tft.setTextColor(TEXT_COLOR);
    tft.setTextSize(1);
    tft.drawString(menuIcons[selectedItem], 25, yPos, 2);
    tft.setTextSize(itemFontSize);
    tft.drawString(menuItems[selectedItem], 25 + iconSize + textOffsetX - 5, yPos, 2);
}

void updateSelection(char key)
{
    if (key == KEY_UP)
    {
        previousItem = selectedItem;
        selectedItem--;
        if (selectedItem < 0)
            selectedItem = 3;
        //erase previous highlight
        int yPos = itemStartY + previousItem * itemSpacing;
        tft.fillRect(10, yPos - 12, tft.width() - 20, 24, BG_COLOR);
        tft.setTextColor(TEXT_COLOR);
        tft.setTextSize(1);
        tft.drawString(menuIcons[previousItem], 25, yPos, 2);
        tft.setTextSize(itemFontSize);
        tft.drawString(menuItems[previousItem], 25 + iconSize + textOffsetX - 5, yPos, 2);

        //draw new highlight
        yPos = itemStartY + selectedItem * itemSpacing;
        tft.fillRect(10, yPos - 12, tft.width() - 20, 24, HIGHLIGHT_COLOR);
        tft.setTextColor(TEXT_COLOR);
        tft.setTextSize(1);
        tft.drawString(menuIcons[selectedItem], 25, yPos, 2);
        tft.setTextSize(itemFontSize);
        tft.drawString(menuItems[selectedItem], 25 + iconSize + textOffsetX - 5, yPos, 2);
    }
    else if (key == KEY_DOWN)
    {
        previousItem = selectedItem;
        selectedItem++;
        if (selectedItem > 3)
            selectedItem = 0;
        //erase previous highlight.
        int yPos = itemStartY + previousItem * itemSpacing;
        tft.fillRect(10, yPos - 12, tft.width() - 20, 24, BG_COLOR);
        tft.setTextColor(TEXT_COLOR);
        tft.setTextSize(1);
        tft.drawString(menuIcons[previousItem], 25, yPos, 2);
        tft.setTextSize(itemFontSize);
        tft.drawString(menuItems[previousItem], 25 + iconSize + textOffsetX - 5, yPos, 2);

        //draw new highlight
        yPos = itemStartY + selectedItem * itemSpacing;
        tft.fillRect(10, yPos - 12, tft.width() - 20, 24, HIGHLIGHT_COLOR);
        tft.setTextColor(TEXT_COLOR);
        tft.setTextSize(1);
        tft.drawString(menuIcons[selectedItem], 25, yPos, 2);
        tft.setTextSize(itemFontSize);
        tft.drawString(menuItems[selectedItem], 25 + iconSize + textOffsetX - 5, yPos, 2);
    }
}

void handleSelection(char key)
{
    if (key == KEY_SELECT)
    {
        tft.fillScreen(BG_COLOR);
        tft.setTextColor(TEXT_COLOR);
        tft.setTextSize(2);
        if (selectedItem == 0)
        {
            // QR Code Pay selected
            String amount = getPaymentAmount();
            Serial.println("Amount entered: " + amount);
            String upiId = "yourname@yourbank";
            generateUpiQRCode(upiId, amount);
            drawHomeScreen();
        }
        else if (selectedItem == 1)
        {
            tft.println("Ready for NFC...");
            delay(1000);
            drawHomeScreen();
        }
        else if (selectedItem == 2)
        {
            tft.println("Payment History...");
            delay(1000);
            drawHomeScreen();
        }
        else if (selectedItem == 3)
        {
            tft.println("Settings Menu...");
            delay(1000);
            drawHomeScreen();
        }
    }
}

void setup()
{
    Serial.begin(115200);
    Serial.println("========= Before Setup End ============");
    tft.init();
    tft.setRotation(0);
    tft.fillScreen(BG_COLOR);
    drawHomeScreen();
}

void loop()
{
    char key = keypad.getKey();
    if (key)
    {
        Serial.print("Key Pressed: ");
        Serial.println(key);
        updateSelection(key);
        handleSelection(key);
    }
    delay(100);
}
\++++++++++++++++++++++++++++++++
#include <TFT_eSPI.h>
#include <esp_err.h>
#include <qrcode.h> // ESP-IDF qrcode.h
#include <string.h> // for strlen

TFT_eSPI tft = TFT_eSPI();

// Function to display the QR code on the TFT -  *Needs Implementation*
void displayQRCodeOnTFT(esp_qrcode_handle_t qrcode) {
    int size = esp_qrcode_get_size(qrcode);
    int moduleSize = 2; // Adjust as needed
    int offsetX = (tft.width() - size * moduleSize) / 2;
    int offsetY = (tft.height() - size * moduleSize) / 2;

    tft.fillScreen(TFT_BLUE); // Clear screen

    for (int y = 0; y < size; y++) {
        for (int x = 0; x < size; x++) {
            if (esp_qrcode_get_module(qrcode, x, y)) {
                tft.fillRect(offsetX + x * moduleSize, offsetY + y * moduleSize, moduleSize, moduleSize, TFT_BLACK);
            }
        }
    }
}

void GenerateAndDisplayQR(const char *upiData) {
    esp_qrcode_config_t qrcode_config = ESP_QRCODE_CONFIG_DEFAULT();
    qrcode_config.display_func = displayQRCodeOnTFT; // Set our display function

    esp_err_t err = esp_qrcode_generate(&qrcode_config, upiData);
    if (err != ESP_OK) {
        Serial.println("QR code generation failed!");
        return;
    }
    //The display function is called by esp_qrcode_generate
}

void setup() {
    Serial.begin(115200);
    tft.init();
    tft.fillScreen(TFT_BLUE);

    // Example UPI data
    const char *upi_data = "upi://pay?pa=your_upi_id&pn=Merchant&am=10.00&cu=INR";
    GenerateAndDisplayQR(upi_data);
    while(1); //Stops the program.
}

void loop() {
  // put your main code here, to run repeatedly:
}
========================
#define TINY_GSM_MODEM_EC200U
#define SerialMon Serial
#define MODEM_RST      5
#define MODEM_PWRKEY   4
#define MODEM_POWER_ON 23
#define MODEM_TX       17
#define MODEM_RX       16
#define BAUD_RATE      115200

#include <TinyGsmClient.h>
#include <HardwareSerial.h>

const char apn[]  = "jionet";
const char user[] = "";
const char pass[] = "";
const char server[] = "example.com";
const int  port = 80;

HardwareSerial SerialAT(1);
TinyGsm modem(SerialAT);
TinyGsmClient client(modem);

void setup() {
  SerialMon.begin(115200);
  delay(10);
  
  SerialMon.println("Initializing modem...");
  SerialAT.begin(BAUD_RATE, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(3000);

  pinMode(MODEM_PWRKEY, OUTPUT);
  digitalWrite(MODEM_PWRKEY, HIGH);
  delay(1000);
  digitalWrite(MODEM_PWRKEY, LOW);
  delay(5000);

  modem.restart();

  String modemInfo = modem.getModemInfo();
  SerialMon.print("Modem: ");
  SerialMon.println(modemInfo);

  SerialMon.print("Waiting for network...");
  if (!modem.waitForNetwork()) {
    SerialMon.println(" failed to connect to network.");
    while (true);
  }
  SerialMon.println(" connected.");

  if (!modem.gprsConnect(apn, user, pass)) {
    SerialMon.println("Failed to connect GPRS");
    return;
  }

  if (!modem.isGprsConnected()) {
    SerialMon.println("GPRS not connected.");
    return;
  }

  SerialMon.println("GPRS connected. Pinging 8.8.8.8");

  int pingResult = modem.ping("8.8.8.8");
  if (pingResult >= 0) {
    SerialMon.print("Ping successful: ");
    SerialMon.print(pingResult);
    SerialMon.println(" ms");
  } else {
    SerialMon.println("Ping failed.");
  }

  // Optional HTTP GET
  if (client.connect(server, port)) {
    SerialMon.println("Connected to server, sending GET request...");
    client.println("GET / HTTP/1.1");
    client.print("Host: "); client.println(server);
    client.println("Connection: close");
    client.println();

    while (client.connected() || client.available()) {
      if (client.available()) {
        String line = client.readStringUntil('\n');
        SerialMon.println(line);
      }
    }
    client.stop();
    SerialMon.println("HTTP request completed.");
  } else {
    SerialMon.println("Failed to connect to server.");
  }
}

void loop() {
  // Optional reconnect logic
}
================
In the Library Manager, type TinyGSM into the search bar.

Locate TinyGSM by Volodymyr Shymanskyy and click Install.

===============
| MAX98357 Pin | ESP32-S3 Pin (Example) | Description                  |
|--------------|------------------------|------------------------------|
| **VIN**      | 5V                     | Power supply input           |
| **GND**      | GND                    | Ground                       |
| **LRC**      | GPIO26                 | Word Select (WS)             |
| **BCLK**     | GPIO27                 | Bit Clock (BCLK)             |
| **DIN**      | GPIO25                 | Serial Data (SD)             |
| **SPK+**     | Speaker +              | Positive speaker terminal    |
| **SPK−**     | Speaker −              | Negative speaker terminal    |


++++++++
1. share the modified code. with required resolve crash modification.
2. While refresh the screen, only show erase the highlight and draw new heighlight. this avoid whole list refresh.
3. Add back to clear the wrong enter text when press the password. Use * for clear/back password.


========================================
Host website in EC2 in AWS :
==============================
1. Login

Step 2: Update Your Instance
	Ensure your instance is up-to-date with the latest security patches and software updates:
	yum update -y
	
Step 3: Install the Web Server
	Install Apache HTTP Server, one of the most popular web servers:

	yum install -y httpd
	
Step4 :  Enable Apache to Start on Boot
	systemctl enable httpd
	
Step 5: Start the Apache Server :
	systemctl start httpd


Install Node :
	
	 sudo yum install -y nodejs
	 
	 npm install express
	 
	 npm install mqtt
	 	 
	 npm install cors
	 
	 
	 
curl -X POST http://localhost:3000/dbs/webhook -H "Content-Type: application/json" -d '{"key":"value"}'

sudo yum install -y mosquitto      # For Amazon Linux 2
sudo systemctl enable mosquitto
sudo systemctl start mosquitto


++++++++
sudo dnf install docker -y
sudo systemctl start docker
sudo systemctl enable docker



============================================================
Securing your MQTT connection is a great step toward protecting your data and devices. Here's how you can secure MQTT using **TLS encryption** and **authentication**.

---

## 🔐 Step-by-Step: Secure MQTT with TLS on AWS

### 1. **Generate TLS Certificates**

You can use OpenSSL to create a self-signed certificate (or use Let's Encrypt for a trusted one):

```bash
# Generate CA key and certificate
openssl genrsa -out ca.key 2048
openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.crt

# Generate server key and CSR
openssl genrsa -out server.key 2048
openssl req -new -key server.key -out server.csr

# Sign server certificate with CA
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 500 -sha256
```

You’ll get:
- `ca.crt` (CA certificate)
- `server.crt` (server certificate)
- `server.key` (server private key)

---

### 2. **Configure Mosquitto for TLS**

Edit your Mosquitto config file (usually at `/etc/mosquitto/mosquitto.conf` or `/etc/mosquitto/conf.d/default.conf`):

```conf
listener 8883
cafile /etc/mosquitto/certs/ca.crt
certfile /etc/mosquitto/certs/server.crt
keyfile /etc/mosquitto/certs/server.key
require_certificate false
```

Then restart Mosquitto:

```bash
sudo systemctl restart mosquitto
```

---

### 3. **Open Port 8883 in AWS Security Group**

- Go to **EC2 > Security Groups > Inbound Rules**
- Add:
  - Type: **Custom TCP**
  - Port: **8883**
  - Source: **Your IP** or **Anywhere (0.0.0.0/0)** for testing

---

### 4. **ESP32 Arduino Code for Secure MQTT**

Install the `WiFiClientSecure` and `PubSubClient` libraries.

```cpp
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>

const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";
const char* mqtt_server = "YOUR_AWS_PUBLIC_IP";
const int mqtt_port = 8883;

WiFiClientSecure secureClient;
PubSubClient client(secureClient);

// Root CA certificate (same as ca.crt)
const char* ca_cert = \
"-----BEGIN CERTIFICATE-----\n" \
"...your CA certificate here...\n" \
"-----END CERTIFICATE-----\n";

void setup_wifi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP32ClientSecure")) {
      client.subscribe("dbs/txnResponse");
    } else {
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  secureClient.setCACert(ca_cert);
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
```

---

Would you like me to:
- Help you generate the certificates?
- Provide a full working `.ino` file?
- Guide you through using **username/password authentication** as well?

Let me know how you'd like to proceed!


Great! Adding **username/password authentication** to your MQTT setup is a good way to enhance security, especially when used alongside TLS.

---

## 🔐 Step-by-Step: MQTT Username/Password Authentication

### 1. **Configure Mosquitto for Authentication**

#### a. Create a password file:
```bash
sudo mosquitto_passwd -c /etc/mosquitto/passwd your_username
```
You'll be prompted to enter a password.

#### b. Update Mosquitto config:
Edit your config file (e.g., `/etc/mosquitto/mosquitto.conf` or `/etc/mosquitto/conf.d/default.conf`) and add:

```conf
listener 8883
cafile /etc/mosquitto/certs/ca.crt
certfile /etc/mosquitto/certs/server.crt
keyfile /etc/mosquitto/certs/server.key

allow_anonymous false
password_file /etc/mosquitto/passwd
```

Then restart Mosquitto:
```bash
sudo systemctl restart mosquitto
```

---

### 2. **ESP32 Arduino Code with Username/Password**

Update your ESP32 code to include:

```cpp
const char* mqtt_user = "your_username";
const char* mqtt_password = "your_password";
```

And modify the `client.connect()` call:

```cpp
if (client.connect("ESP32ClientSecure", mqtt_user, mqtt_password)) {
    client.subscribe("dbs/txnResponse");
}
```

The rest of the code remains the same as in the TLS example.

---

### ✅ Summary

| Feature        | Status |
|----------------|--------|
| TLS Encryption | ✅     |
| Username/Password | ✅  |
| Port Used      | `8883` |

---

Would you like me to generate a **complete `.ino` file** with TLS + username/password support for your ESP32-S3?


#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>

// Replace with your Wi-Fi credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// Replace with your AWS EC2 public IP or domain
const char* mqtt_server = "YOUR_AWS_PUBLIC_IP";
const int mqtt_port = 8883;

// MQTT username and password
const char* mqtt_user = "your_username";
const char* mqtt_password = "your_password";

// Root CA certificate (same as ca.crt)
const char* ca_cert = \
"-----BEGIN CERTIFICATE-----\n" \
"...your CA certificate here...\n" \
"-----END CERTIFICATE-----\n";

WiFiClientSecure secureClient;
PubSubClient client(secureClient);

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.printResponse");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void setup() {
  secureClient.setCACert(ca_cert);
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}

To copy the **CA certificate (`ca.crt`)** or any other file from your **AWS server to your local machine**, you can use the **`scp` (secure copy)** command.

---

### 📥 Copy File from AWS to Local Machine

```bash
scp -i /path/to/your-key.pem ubuntu@your-aws-public-ip:/path/to/ca.crt ./ca.crt
```

#### 🔧 Replace:
- `/path/to/your-key.pem`: Path to your AWS EC2 private key file.
- `ubuntu`: Your EC2 username (usually `ubuntu` for Ubuntu AMIs).
- `your-aws-public-ip`: Your EC2 instance's public IP or DNS.
- `/path/to/ca.crt`: Path to the certificate on the AWS server (e.g., `/etc/mosquitto/certs/ca.crt`).
- `./ca.crt`: Destination path on your local machine.

---

### 📤 Copy File from Local to AWS (Reverse)

If you ever need to upload a file to AWS:

```bash
scp -i /path/to/your-key.pem ./ca.crt ubuntu@your-aws-public-ip:/home/ubuntu/
```

---

### ✅ Example

```bash
scp -i ~/aws-keys/my-ec2-key.pem ubuntu@3.110.45.123:/etc/mosquitto/certs/ca.crt ~/Downloads/
```

This will copy `ca.crt` from your AWS server to your local `Downloads` folder.

---

Would you like help locating your `.pem` key or checking the path of the certificate on your AWS server?

=========================================
To enable mqtt 
---------------
sudo nano /etc/mosquitto/mosquitto.conf

